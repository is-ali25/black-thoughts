{"version":3,"sources":["Components/Graph.js","Components/Overview.js","Components/Submission.js","utils.js","App.js","reportWebVitals.js","index.js","Components/Submission.module.css","Components/Graph.module.css","Components/Overview.module.css"],"names":["Graph","data","changeDescription","fgRef","useRef","handleClick","useCallback","node","distRatio","Math","hypot","x","y","z","current","cameraPosition","name","description","link","relatedAuthors","className","GraphCSS","graph","ref","graphData","width","height","backgroundColor","onNodeClick","Overview","OverviewCSS","overview","map","item","includes","href","Submission","formHandler","title","keywords","date","author","organization","location","citations","update","SubmissionCSS","submission","submissionForm","onSubmit","e","type","placeholder","value","onChange","target","button","createNode","id","val","nodeAddition","length","newNodes","counter","forEach","push","createAuthorMap","nodes","nodeData","split","newAuthorData","preexistent","newEdge","array","result","edge","linkSchemes","authorMap","Object","keys","edges","i","j","console","log","Utils","App","useState","setNodes","setAuthorMap","linkScheme","linkSchemeArgs","setLinkSchemeArgs","links","setLinks","graphReady","setGraphReady","setGraphData","useEffect","a","axios","get","then","res","catch","err","error","prevArgs","newArgs","show","setShow","submissionData","setSubmissionData","preventDefault","post","setDescription","newTextItems","prevData","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4eb9122c.chunk.js","sourcesContent":["import React, {useCallback, useRef} from 'react'\r\nimport { ForceGraph3D } from 'react-force-graph'\r\nimport GraphCSS from './Graph.module.css'\r\n\r\n\r\nconst Graph = ({data, changeDescription}) => {\r\n    const fgRef = useRef();\r\n\r\n    const handleClick = useCallback(node => {\r\n      // Aim at node from outside it\r\n      const distance = 100;\r\n      const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z)\r\n  \r\n      fgRef.current.cameraPosition(\r\n        { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        2000  // ms transition duration\r\n      )\r\n\r\n      changeDescription([node.name, node.description, node.link, node.relatedAuthors])\r\n\r\n    }, [fgRef])\r\n\r\n    return(\r\n        <div className={GraphCSS.graph}>\r\n            <ForceGraph3D ref={fgRef} graphData={data} width={900} height={GraphCSS.graph.height} backgroundColor={\"#5F9DA0\"} onNodeClick={handleClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*next steps:\r\n-implement onClick function\r\n-start adding to database\r\n*/\r\n\r\nexport default Graph","import OverviewCSS from './Overview.module.css'\r\nconst Overview = ({description}) => {\r\n    return(\r\n        <div className = {OverviewCSS.overview}>\r\n            <h1>Black Thoughts</h1>\r\n            {description.map(item => {return (item.includes('https://') ? \r\n                <a href={item}><h3 key={item}>{item}</h3></a>               //how do I ensure every item gets a unique key?\r\n                : \r\n                <h3 key={item}>{item}</h3>)})}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Overview","import SubmissionCSS from './Submission.module.css'\r\n\r\nconst Submission = ({formHandler, title, description, link, keywords, date, author, organization, location, relatedAuthors, citations, update}) => {\r\n    return(\r\n        <div className = {SubmissionCSS.submission}>\r\n            <h1>Add Submission</h1>\r\n            <form className = {SubmissionCSS.submissionForm} onSubmit={e => {formHandler(e)}}>\r\n            <input type=\"text\" name=\"title\" placeholder=\"title\" value={title} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <textarea type=\"text-area\" name=\"description\" placeholder=\"description\" value={description} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"link\" placeholder=\"link\" value={link} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"keywords\" placeholder=\"keywords\" value={keywords} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"date\" placeholder=\"date of publication\" value={date} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"author\" placeholder=\"author\" value={author} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"organization\" placeholder=\"organization\" value={organization} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"location\" placeholder=\"location\" value={location} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"relatedAuthors\" placeholder=\"related authors\" value={relatedAuthors} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input type=\"text\" name=\"citations\" placeholder=\"citations\" value={citations} onChange= {(e) => update(e.target.name, e.target.value)}/>\r\n            <input className={SubmissionCSS.button} type=\"submit\" placeholder=\"Submit\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Submission","//translates an element of data into a node object\r\nexport function createNode(submission, id) {\r\n    const node = {\r\n        id: id,\r\n        name: submission['title'],\r\n        link: submission['link'],\r\n        keywords: submission['keywords'],\r\n        date: submission['date'],\r\n        author: submission['author'],\r\n        organization: submission['organization'],\r\n        location: submission['location'],\r\n        relatedAuthors: submission['relatedAuthors'],\r\n        citations: submission['citations'],\r\n        val: 1,\r\n        description: submission['description'], //need to add a description field to data objects\r\n      }\r\n\r\n      return node;\r\n}\r\n\r\n//returns data as an array of node objects\r\nexport function nodeAddition(data) {\r\n    if (data.length <= 0) {\r\n      return [];\r\n    }\r\n\r\n    const newNodes = []\r\n    var counter = 0;\r\n    data.forEach(submission => {\r\n      const id = counter\r\n      newNodes.push(createNode(submission, id))\r\n      counter ++;\r\n    })\r\n    return newNodes\r\n  }\r\n\r\n\r\n\r\n//returns a HashMap whose keys are authors and whose values are arrays entailing the id's of the nodes which reference that author\r\nexport function createAuthorMap(nodes) {\r\n    const newNodes = []\r\n    nodes.forEach(node => {\r\n      const nodeData = {\r\n        id: node['id'], \r\n        relatedAuthors: [...node['relatedAuthors'].split(', ')]\r\n      }\r\n      newNodes.push(nodeData)\r\n    })\r\n    \r\n    const newAuthorData = {}\r\n    newNodes.forEach(node => {\r\n      node['relatedAuthors'].forEach(author => {\r\n        if (!(author in newAuthorData)) {\r\n          newAuthorData[author] = [node['id']]\r\n        } else {\r\n          newAuthorData[author].push(node['id'])\r\n        }\r\n      })\r\n    })\r\n\r\n    return newAuthorData\r\n}\r\n\r\n//returns true if an edge already exists in the graph\r\nexport function preexistent(newEdge, array) {\r\n    let result = false\r\n    array.forEach(edge => {\r\n      if (edge['source'] === newEdge['source'] &&\r\n          edge['target'] === newEdge['target']) {\r\n            result = true\r\n          }\r\n    })\r\n    return result\r\n}\r\n\r\n//creates edges between nodes if nodes majorly cite one or more common authors\r\nexport function edgesByAuthor(authorMap) {\r\n    if (Object.keys(authorMap).length <= 0) {\r\n        return []\r\n    }\r\n          \r\n    const edges = []\r\n    for (const author in authorMap) {\r\n        for (let i = 0; i < authorMap[author].length; i++) {\r\n            for(let j = i + 1; j < authorMap[author].length; j++) {\r\n                const newEdge = {\r\n                    'source': authorMap[author][i],\r\n                    'target': authorMap[author][j]\r\n                }\r\n\r\n                if (!preexistent(newEdge, edges)) { //does this have to be linear? Might wanna make a HashSet instead\r\n                    console.log(`new edge from ${authorMap[author][i]} to ${authorMap[author][j]}`)\r\n                    edges.push(newEdge)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return edges;\r\n}\r\n\r\nexport function blankForm() {\r\n    return {\r\n        title: '',\r\n        description: '',\r\n        link:'',\r\n        keywords:'',\r\n        date: '',\r\n        author: '',\r\n        organization:'',\r\n        location: '',\r\n        relatedAuthors: '',\r\n        citations:'',\r\n      }\r\n}\r\n\r\n","import './App.css'\n\nimport Graph from './Components/Graph'\nimport Overview from './Components/Overview'\nimport Submission from './Components/Submission'\n\nimport React, {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nimport * as Utils from './utils'\n\n\nconst linkSchemes = {\n  'byAuthor': (map) => {\n      return Utils.edgesByAuthor(map)\n  }\n}\n\nfunction App() {\n                                      //////////////////////GRAPH FUNCTIONALITY////////////////////\n  //initial state for graph data\n  const [nodes, setNodes] = useState([])\n  const [authorMap, setAuthorMap] = useState({})\n  const [linkScheme] = useState('byAuthor')\n  const [linkSchemeArgs, setLinkSchemeArgs] = useState({\n    'byAuthor': {} //might want the values to be lists for generalizability\n  })\n  const [links, setLinks] = useState([])\n  const [graphReady, setGraphReady] = useState(false)\n  const [graphData, setGraphData] = useState({\n    nodes: nodes,\n    links: links\n  })\n\n  //gets data from database on startup, then uses said data to update the nodes state array\n  useEffect(async () => {\n    await axios.get('http://localhost:5000/')\n    .then(res => {\n      if(res.data.length > 0) {\n        setNodes(Utils.nodeAddition(res.data))\n      }\n    })\n    .catch(err => console.error(err))\n  }, [])\n\n  //create a HashMap whose keys are authors and whose values are arrays entailing the id's of the nodes which reference that author\n  useEffect( () => {\n    setAuthorMap(Utils.createAuthorMap(nodes))\n    setLinkSchemeArgs(prevArgs => {\n      let newArgs = prevArgs\n      newArgs['byAuthor'] = Utils.createAuthorMap(nodes)\n      return newArgs\n    })\n  }, [nodes])\n\n  //use appropriate link generating function to add edges to the new nodes\n  useEffect(() => {\n    //linkSchemes[linkScheme] is the function being used to create links, and linkSchemeArgs[linkScheme] is the argument the function takes\n    setLinks(linkSchemes[linkScheme](linkSchemeArgs[linkScheme]))\n    setGraphReady(true)\n  }, [authorMap])\n\n  //use nodes and links data to set overall graphData\n  useEffect(() => {\n    if (graphReady) {\n      setGraphData({\n        nodes: nodes,\n        links: links\n      })\n      setGraphReady(false)\n    }\n  }, [graphReady])\n\n                                 //////////////////////SUBMISSION FORM FUNCTIONALITY////////////////////\n\n  //initial state for submission form\n  const [show, setShow] = useState(false)\n  const[submissionData, setSubmissionData] = useState(Utils.blankForm())\n\n   //state manager for form inputs...apparently I should duplicate this logic for every form input :/\n  const updateForm = (name, value) => {\n    setSubmissionData(prevData => {return {...prevData, [name]: value }})\n  }\n\n  //formHandler function (adds new node with appropriate edges to the graph)\n  const formHandler = async (e) => {\n    e.preventDefault()\n    await axios.post('http://localhost:5000/add', submissionData)\n        .then(res => {\n          setNodes(nodes.push(Utils.createNode(res.data, nodes.length)))\n    }).catch(err => console.error(err))\n    setSubmissionData(Utils.blankForm())\n  }\n\n                      //////////////////////////////////////////FOR GRAPH INTERACTION/////////////////////////////////////\n\n  const [description, setDescription] = useState([\"Associate for free\"])\n\n  const newDescription = (newTextItems) => {\n    setShow(false)\n    setDescription(newTextItems)\n  }\n\n                      //////////////////////////////////////////THE ACTUAL COMPONENT/////////////////////////////////////\n    return (\n    <div className=\"App\">\n\n        <Graph data={graphData} changeDescription= {newDescription}/>\n\n        {!show ? <Overview description= {description}/> :\n\n        <Submission \n        title={submissionData.title}              //need to migrate this to a form component...\n        description={submissionData.description}\n        link={submissionData.link}\n        keywords={submissionData.keywords}\n        date={submissionData.date}\n        author={submissionData.author}\n        organization={submissionData.organization}\n        location={submissionData.location}\n        relatedAuthors={submissionData.relatedAuthors}\n        citations={submissionData.citations} \n        update={updateForm}\n        formHandler={formHandler} />}\n\n        <button className=\"addSubBtn\" onClick={() => setShow(!show)}>{show ? \"Close\" : \"+\"}</button>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submission\":\"Submission_submission__HbKHu\",\"annotation\":\"Submission_annotation__2OaxG\",\"submissionForm\":\"Submission_submissionForm__p42yB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graph\":\"Graph_graph__1nWte\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overview\":\"Overview_overview__1DALJ\",\"annotation\":\"Overview_annotation__1Mua3\"};"],"sourceRoot":""}